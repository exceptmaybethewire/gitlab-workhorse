// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operations.proto

package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserCreateBranchRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	BranchName []byte      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	User       *User       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	StartPoint []byte      `protobuf:"bytes,4,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`
}

func (m *UserCreateBranchRequest) Reset()                    { *m = UserCreateBranchRequest{} }
func (m *UserCreateBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserCreateBranchRequest) ProtoMessage()               {}
func (*UserCreateBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *UserCreateBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCreateBranchRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserCreateBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCreateBranchRequest) GetStartPoint() []byte {
	if m != nil {
		return m.StartPoint
	}
	return nil
}

type UserCreateBranchResponse struct {
	Branch *Branch `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	// Error returned by the pre-receive hook. If no error was thrown,
	// it's the empty string ("")
	PreReceiveError string `protobuf:"bytes,2,opt,name=pre_receive_error,json=preReceiveError" json:"pre_receive_error,omitempty"`
}

func (m *UserCreateBranchResponse) Reset()                    { *m = UserCreateBranchResponse{} }
func (m *UserCreateBranchResponse) String() string            { return proto.CompactTextString(m) }
func (*UserCreateBranchResponse) ProtoMessage()               {}
func (*UserCreateBranchResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *UserCreateBranchResponse) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserCreateBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserDeleteBranchRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	BranchName []byte      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	User       *User       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *UserDeleteBranchRequest) Reset()                    { *m = UserDeleteBranchRequest{} }
func (m *UserDeleteBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserDeleteBranchRequest) ProtoMessage()               {}
func (*UserDeleteBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *UserDeleteBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserDeleteBranchRequest) GetBranchName() []byte {
	if m != nil {
		return m.BranchName
	}
	return nil
}

func (m *UserDeleteBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserDeleteBranchResponse struct {
	PreReceiveError string `protobuf:"bytes,1,opt,name=pre_receive_error,json=preReceiveError" json:"pre_receive_error,omitempty"`
}

func (m *UserDeleteBranchResponse) Reset()                    { *m = UserDeleteBranchResponse{} }
func (m *UserDeleteBranchResponse) String() string            { return proto.CompactTextString(m) }
func (*UserDeleteBranchResponse) ProtoMessage()               {}
func (*UserDeleteBranchResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *UserDeleteBranchResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserDeleteTagRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	TagName    []byte      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	User       *User       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *UserDeleteTagRequest) Reset()                    { *m = UserDeleteTagRequest{} }
func (m *UserDeleteTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UserDeleteTagRequest) ProtoMessage()               {}
func (*UserDeleteTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *UserDeleteTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserDeleteTagRequest) GetTagName() []byte {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *UserDeleteTagRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserDeleteTagResponse struct {
	PreReceiveError string `protobuf:"bytes,1,opt,name=pre_receive_error,json=preReceiveError" json:"pre_receive_error,omitempty"`
}

func (m *UserDeleteTagResponse) Reset()                    { *m = UserDeleteTagResponse{} }
func (m *UserDeleteTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UserDeleteTagResponse) ProtoMessage()               {}
func (*UserDeleteTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *UserDeleteTagResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserCreateTagRequest struct {
	Repository     *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	TagName        []byte      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	User           *User       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	TargetRevision []byte      `protobuf:"bytes,4,opt,name=target_revision,json=targetRevision,proto3" json:"target_revision,omitempty"`
	Message        []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UserCreateTagRequest) Reset()                    { *m = UserCreateTagRequest{} }
func (m *UserCreateTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UserCreateTagRequest) ProtoMessage()               {}
func (*UserCreateTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *UserCreateTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserCreateTagRequest) GetTagName() []byte {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *UserCreateTagRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCreateTagRequest) GetTargetRevision() []byte {
	if m != nil {
		return m.TargetRevision
	}
	return nil
}

func (m *UserCreateTagRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type UserCreateTagResponse struct {
	Tag             *Tag   `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Exists          bool   `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	PreReceiveError string `protobuf:"bytes,3,opt,name=pre_receive_error,json=preReceiveError" json:"pre_receive_error,omitempty"`
}

func (m *UserCreateTagResponse) Reset()                    { *m = UserCreateTagResponse{} }
func (m *UserCreateTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UserCreateTagResponse) ProtoMessage()               {}
func (*UserCreateTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *UserCreateTagResponse) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *UserCreateTagResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *UserCreateTagResponse) GetPreReceiveError() string {
	if m != nil {
		return m.PreReceiveError
	}
	return ""
}

type UserMergeBranchRequest struct {
	// First message
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	User       *User       `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	CommitId   string      `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Branch     []byte      `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Message    []byte      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Second message
	// Tell the server to apply the merge to the branch
	Apply bool `protobuf:"varint,6,opt,name=apply" json:"apply,omitempty"`
}

func (m *UserMergeBranchRequest) Reset()                    { *m = UserMergeBranchRequest{} }
func (m *UserMergeBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserMergeBranchRequest) ProtoMessage()               {}
func (*UserMergeBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *UserMergeBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UserMergeBranchRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserMergeBranchRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserMergeBranchRequest) GetBranch() []byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *UserMergeBranchRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UserMergeBranchRequest) GetApply() bool {
	if m != nil {
		return m.Apply
	}
	return false
}

type UserMergeBranchResponse struct {
	// First message
	// The merge commit the branch will be updated to. The caller can still abort the merge.
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	// Second message
	// If set, the merge has been applied to the branch.
	BranchUpdate *OperationBranchUpdate `protobuf:"bytes,3,opt,name=branch_update,json=branchUpdate" json:"branch_update,omitempty"`
}

func (m *UserMergeBranchResponse) Reset()                    { *m = UserMergeBranchResponse{} }
func (m *UserMergeBranchResponse) String() string            { return proto.CompactTextString(m) }
func (*UserMergeBranchResponse) ProtoMessage()               {}
func (*UserMergeBranchResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *UserMergeBranchResponse) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UserMergeBranchResponse) GetBranchUpdate() *OperationBranchUpdate {
	if m != nil {
		return m.BranchUpdate
	}
	return nil
}

type OperationBranchUpdate struct {
	// If this string is non-empty the branch has been updated.
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	// Used for cache invalidation in GitLab
	RepoCreated bool `protobuf:"varint,2,opt,name=repo_created,json=repoCreated" json:"repo_created,omitempty"`
	// Used for cache invalidation in GitLab
	BranchCreated bool `protobuf:"varint,3,opt,name=branch_created,json=branchCreated" json:"branch_created,omitempty"`
}

func (m *OperationBranchUpdate) Reset()                    { *m = OperationBranchUpdate{} }
func (m *OperationBranchUpdate) String() string            { return proto.CompactTextString(m) }
func (*OperationBranchUpdate) ProtoMessage()               {}
func (*OperationBranchUpdate) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *OperationBranchUpdate) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *OperationBranchUpdate) GetRepoCreated() bool {
	if m != nil {
		return m.RepoCreated
	}
	return false
}

func (m *OperationBranchUpdate) GetBranchCreated() bool {
	if m != nil {
		return m.BranchCreated
	}
	return false
}

func init() {
	proto.RegisterType((*UserCreateBranchRequest)(nil), "gitaly.UserCreateBranchRequest")
	proto.RegisterType((*UserCreateBranchResponse)(nil), "gitaly.UserCreateBranchResponse")
	proto.RegisterType((*UserDeleteBranchRequest)(nil), "gitaly.UserDeleteBranchRequest")
	proto.RegisterType((*UserDeleteBranchResponse)(nil), "gitaly.UserDeleteBranchResponse")
	proto.RegisterType((*UserDeleteTagRequest)(nil), "gitaly.UserDeleteTagRequest")
	proto.RegisterType((*UserDeleteTagResponse)(nil), "gitaly.UserDeleteTagResponse")
	proto.RegisterType((*UserCreateTagRequest)(nil), "gitaly.UserCreateTagRequest")
	proto.RegisterType((*UserCreateTagResponse)(nil), "gitaly.UserCreateTagResponse")
	proto.RegisterType((*UserMergeBranchRequest)(nil), "gitaly.UserMergeBranchRequest")
	proto.RegisterType((*UserMergeBranchResponse)(nil), "gitaly.UserMergeBranchResponse")
	proto.RegisterType((*OperationBranchUpdate)(nil), "gitaly.OperationBranchUpdate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OperationService service

type OperationServiceClient interface {
	UserCreateBranch(ctx context.Context, in *UserCreateBranchRequest, opts ...grpc.CallOption) (*UserCreateBranchResponse, error)
	UserDeleteBranch(ctx context.Context, in *UserDeleteBranchRequest, opts ...grpc.CallOption) (*UserDeleteBranchResponse, error)
	UserCreateTag(ctx context.Context, in *UserCreateTagRequest, opts ...grpc.CallOption) (*UserCreateTagResponse, error)
	UserDeleteTag(ctx context.Context, in *UserDeleteTagRequest, opts ...grpc.CallOption) (*UserDeleteTagResponse, error)
	UserMergeBranch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserMergeBranchClient, error)
}

type operationServiceClient struct {
	cc *grpc.ClientConn
}

func NewOperationServiceClient(cc *grpc.ClientConn) OperationServiceClient {
	return &operationServiceClient{cc}
}

func (c *operationServiceClient) UserCreateBranch(ctx context.Context, in *UserCreateBranchRequest, opts ...grpc.CallOption) (*UserCreateBranchResponse, error) {
	out := new(UserCreateBranchResponse)
	err := grpc.Invoke(ctx, "/gitaly.OperationService/UserCreateBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserDeleteBranch(ctx context.Context, in *UserDeleteBranchRequest, opts ...grpc.CallOption) (*UserDeleteBranchResponse, error) {
	out := new(UserDeleteBranchResponse)
	err := grpc.Invoke(ctx, "/gitaly.OperationService/UserDeleteBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserCreateTag(ctx context.Context, in *UserCreateTagRequest, opts ...grpc.CallOption) (*UserCreateTagResponse, error) {
	out := new(UserCreateTagResponse)
	err := grpc.Invoke(ctx, "/gitaly.OperationService/UserCreateTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserDeleteTag(ctx context.Context, in *UserDeleteTagRequest, opts ...grpc.CallOption) (*UserDeleteTagResponse, error) {
	out := new(UserDeleteTagResponse)
	err := grpc.Invoke(ctx, "/gitaly.OperationService/UserDeleteTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationServiceClient) UserMergeBranch(ctx context.Context, opts ...grpc.CallOption) (OperationService_UserMergeBranchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OperationService_serviceDesc.Streams[0], c.cc, "/gitaly.OperationService/UserMergeBranch", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUserMergeBranchClient{stream}
	return x, nil
}

type OperationService_UserMergeBranchClient interface {
	Send(*UserMergeBranchRequest) error
	Recv() (*UserMergeBranchResponse, error)
	grpc.ClientStream
}

type operationServiceUserMergeBranchClient struct {
	grpc.ClientStream
}

func (x *operationServiceUserMergeBranchClient) Send(m *UserMergeBranchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUserMergeBranchClient) Recv() (*UserMergeBranchResponse, error) {
	m := new(UserMergeBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OperationService service

type OperationServiceServer interface {
	UserCreateBranch(context.Context, *UserCreateBranchRequest) (*UserCreateBranchResponse, error)
	UserDeleteBranch(context.Context, *UserDeleteBranchRequest) (*UserDeleteBranchResponse, error)
	UserCreateTag(context.Context, *UserCreateTagRequest) (*UserCreateTagResponse, error)
	UserDeleteTag(context.Context, *UserDeleteTagRequest) (*UserDeleteTagResponse, error)
	UserMergeBranch(OperationService_UserMergeBranchServer) error
}

func RegisterOperationServiceServer(s *grpc.Server, srv OperationServiceServer) {
	s.RegisterService(&_OperationService_serviceDesc, srv)
}

func _OperationService_UserCreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserCreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserCreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserCreateBranch(ctx, req.(*UserCreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserDeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserDeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserDeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserDeleteBranch(ctx, req.(*UserDeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserCreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserCreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserCreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserCreateTag(ctx, req.(*UserCreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserDeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServiceServer).UserDeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.OperationService/UserDeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServiceServer).UserDeleteTag(ctx, req.(*UserDeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationService_UserMergeBranch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UserMergeBranch(&operationServiceUserMergeBranchServer{stream})
}

type OperationService_UserMergeBranchServer interface {
	Send(*UserMergeBranchResponse) error
	Recv() (*UserMergeBranchRequest, error)
	grpc.ServerStream
}

type operationServiceUserMergeBranchServer struct {
	grpc.ServerStream
}

func (x *operationServiceUserMergeBranchServer) Send(m *UserMergeBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUserMergeBranchServer) Recv() (*UserMergeBranchRequest, error) {
	m := new(UserMergeBranchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OperationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.OperationService",
	HandlerType: (*OperationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreateBranch",
			Handler:    _OperationService_UserCreateBranch_Handler,
		},
		{
			MethodName: "UserDeleteBranch",
			Handler:    _OperationService_UserDeleteBranch_Handler,
		},
		{
			MethodName: "UserCreateTag",
			Handler:    _OperationService_UserCreateTag_Handler,
		},
		{
			MethodName: "UserDeleteTag",
			Handler:    _OperationService_UserDeleteTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserMergeBranch",
			Handler:       _OperationService_UserMergeBranch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "operations.proto",
}

func init() { proto.RegisterFile("operations.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0x34, 0x4d, 0x27, 0x69, 0x12, 0x56, 0x6d, 0x31, 0x81, 0x90, 0x60, 0x09, 0x88,
	0x38, 0x44, 0x28, 0xfc, 0x41, 0x0b, 0x48, 0x20, 0x51, 0x90, 0xa1, 0x82, 0x9b, 0xb5, 0x89, 0x47,
	0xae, 0xa5, 0xc4, 0x36, 0xbb, 0x9b, 0x88, 0x70, 0x40, 0xdc, 0xb8, 0xf2, 0x2b, 0xfc, 0x00, 0x1f,
	0xc0, 0x95, 0x1f, 0x42, 0xde, 0x5d, 0xa7, 0xb6, 0xe3, 0x20, 0x04, 0x48, 0x70, 0xdc, 0xd9, 0xf1,
	0x9b, 0xf7, 0xde, 0xce, 0x8c, 0xa1, 0x13, 0xc5, 0xc8, 0xa8, 0x08, 0xa2, 0x90, 0x8f, 0x62, 0x16,
	0x89, 0x88, 0xd4, 0xfc, 0x40, 0xd0, 0xd9, 0xaa, 0xdb, 0xe4, 0x17, 0x94, 0xa1, 0xa7, 0xa2, 0xf6,
	0x17, 0x03, 0xae, 0x9e, 0x73, 0x64, 0xa7, 0x0c, 0xa9, 0xc0, 0x13, 0x46, 0xc3, 0xe9, 0x85, 0x83,
	0x6f, 0x17, 0xc8, 0x05, 0x19, 0x03, 0x30, 0x8c, 0x23, 0x1e, 0x88, 0x88, 0xad, 0x2c, 0x63, 0x60,
	0x0c, 0x1b, 0x63, 0x32, 0x52, 0x30, 0x23, 0x67, 0x7d, 0xe3, 0x64, 0xb2, 0x48, 0x1f, 0x1a, 0x13,
	0x09, 0xe2, 0x86, 0x74, 0x8e, 0x56, 0x65, 0x60, 0x0c, 0x9b, 0x0e, 0xa8, 0xd0, 0x19, 0x9d, 0x23,
	0x19, 0x40, 0x75, 0xc1, 0x91, 0x59, 0xa6, 0x84, 0x6b, 0xa6, 0x70, 0x09, 0x07, 0x47, 0xde, 0x24,
	0x10, 0x5c, 0x50, 0x26, 0xdc, 0x38, 0x0a, 0x42, 0x61, 0x55, 0x15, 0x84, 0x0c, 0xbd, 0x48, 0x22,
	0x76, 0x08, 0xd6, 0x26, 0x65, 0x1e, 0x47, 0x21, 0x47, 0x72, 0x07, 0x6a, 0xaa, 0x98, 0xe6, 0xdb,
	0x4a, 0x0b, 0xe8, 0x3c, 0x7d, 0x4b, 0xee, 0xc1, 0x95, 0x98, 0xa1, 0xcb, 0x70, 0x8a, 0xc1, 0x12,
	0x5d, 0x64, 0x2c, 0x62, 0x92, 0xed, 0xbe, 0xd3, 0x8e, 0x19, 0x3a, 0x2a, 0xfe, 0x28, 0x09, 0xdb,
	0x9f, 0xb5, 0x47, 0x0f, 0x71, 0x86, 0xff, 0x87, 0x47, 0xf6, 0x63, 0x65, 0x41, 0x9e, 0x91, 0xb6,
	0xa0, 0x54, 0x9a, 0x51, 0x2e, 0xed, 0x93, 0x01, 0x87, 0x97, 0x40, 0xaf, 0xa8, 0xff, 0x27, 0xba,
	0xae, 0x41, 0x5d, 0x50, 0x3f, 0x2b, 0x6a, 0x4f, 0x50, 0xff, 0x17, 0x15, 0x9d, 0xc2, 0x51, 0x81,
	0xc8, 0x6f, 0xc8, 0xf9, 0xa6, 0xe5, 0xa8, 0xd6, 0xf8, 0x87, 0x72, 0xc8, 0x5d, 0x68, 0x0b, 0xca,
	0x7c, 0x14, 0x2e, 0xc3, 0x65, 0xc0, 0x83, 0x28, 0xd4, 0x8d, 0xdc, 0x52, 0x61, 0x47, 0x47, 0x89,
	0x05, 0x7b, 0x73, 0xe4, 0x9c, 0xfa, 0x68, 0xed, 0xaa, 0x22, 0xfa, 0x68, 0xbf, 0x57, 0x8e, 0x64,
	0xb4, 0x68, 0x47, 0x7a, 0x60, 0x0a, 0xea, 0x6b, 0x15, 0x8d, 0xb4, 0x78, 0x92, 0x91, 0xc4, 0xc9,
	0x31, 0xd4, 0xf0, 0x5d, 0xc0, 0x05, 0x97, 0xac, 0xeb, 0x8e, 0x3e, 0x95, 0x1b, 0x69, 0x96, 0x1b,
	0xf9, 0xdd, 0x80, 0xe3, 0xa4, 0xf8, 0x33, 0x64, 0xfe, 0x5f, 0xe8, 0xf8, 0xd4, 0xaf, 0xca, 0x56,
	0xbf, 0xae, 0xc3, 0xfe, 0x34, 0x9a, 0xcf, 0x03, 0xe1, 0x06, 0x9e, 0x26, 0x55, 0x57, 0x81, 0x27,
	0x5e, 0xa2, 0x48, 0x0f, 0xb5, 0xf2, 0x30, 0x1d, 0xe2, 0xad, 0xde, 0x91, 0x43, 0xd8, 0xa5, 0x71,
	0x3c, 0x5b, 0x59, 0x35, 0x69, 0x81, 0x3a, 0xd8, 0x1f, 0xf5, 0x20, 0xe7, 0x54, 0x69, 0x53, 0x73,
	0x04, 0x8c, 0x02, 0x81, 0x13, 0x38, 0xd0, 0x13, 0xbb, 0x88, 0x3d, 0x2a, 0x50, 0x3f, 0x7c, 0x2f,
	0x15, 0xf2, 0x3c, 0x5d, 0xb6, 0x0a, 0xf4, 0x5c, 0x26, 0x39, 0xcd, 0x49, 0xe6, 0xf4, 0xb4, 0x5a,
	0xaf, 0x74, 0x4c, 0xfb, 0x03, 0x1c, 0x95, 0x26, 0xff, 0xbc, 0xfe, 0x2d, 0x68, 0x26, 0x6e, 0xba,
	0x53, 0xd9, 0x0b, 0x9e, 0x7e, 0xd8, 0x46, 0x12, 0x53, 0xed, 0xe1, 0x91, 0xdb, 0xd0, 0xd2, 0x14,
	0xd3, 0x24, 0x53, 0x26, 0x69, 0xe2, 0x3a, 0x6d, 0xfc, 0xd5, 0x84, 0xce, 0x9a, 0xc0, 0x4b, 0x64,
	0xcb, 0x60, 0x8a, 0xe4, 0x35, 0x74, 0x8a, 0x0b, 0x95, 0xf4, 0xb3, 0x8f, 0x54, 0xf2, 0x77, 0xe8,
	0x0e, 0xb6, 0x27, 0x28, 0x4b, 0xed, 0x9d, 0x14, 0x38, 0xbb, 0xa6, 0xf2, 0xc0, 0x25, 0x2b, 0x35,
	0x0f, 0x5c, 0xb6, 0xe1, 0xec, 0x1d, 0x72, 0x06, 0x07, 0xb9, 0xd9, 0x20, 0x37, 0x36, 0xd9, 0x5c,
	0x8e, 0x7f, 0xb7, 0xb7, 0xe5, 0xb6, 0x88, 0xb7, 0xde, 0x3e, 0x79, 0xbc, 0xe2, 0x76, 0xcc, 0xe3,
	0x6d, 0xac, 0x2c, 0x7b, 0x87, 0xbc, 0x81, 0x76, 0xa1, 0xd1, 0xc8, 0xcd, 0xec, 0x37, 0x9b, 0x73,
	0xd5, 0xed, 0x6f, 0xbd, 0x4f, 0x51, 0x87, 0xc6, 0x7d, 0x63, 0x52, 0x93, 0xff, 0xed, 0x07, 0x3f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x35, 0x6e, 0x0e, 0xe1, 0x07, 0x00, 0x00,
}
